http://old-www.cs.dartmouth.edu/~cs50/Labs/Lab3/
3
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Lab 3 - Data structures in C</title>
  <meta name="description" content="In Computer Science 50 you will learn how to design & build large,  reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="stylesheet" href="/~cs50/css/main.css">
  <link rel="canonical" href="http://www.cs.dartmouth.edu/~cs50/Labs/Lab3/">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/~cs50/">CS50 Summer 2016</a>

    <nav class="site-nav">

      [<a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a>]
      [<a href="https://piazza.com/dartmouth/summer2016/cs50/home">Piazza</a>]
      [<a href="https://gitlab.cs.dartmouth.edu">Gitlab</a>]
      [<a href="/~cs50/Schedule.pdf">Schedule</a>]
      [<a href="/~cs50/Lectures/">Lectures</a>]
      [<a href="/~cs50/Reading/">Reading</a>]
<!--      [<a href="/~cs50/examples/">Examples</a>]  -->
      [<a href="/~cs50/Logistics/">Logistics</a>]
      [<a href="/~cs50/Resources/">Resources</a>]
      [<a href="/~cs50/Labs/">Labs</a>]
      [<a href="/~cs50/Project/">Project</a>]

   </nav>
</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Lab 3 - Data structures in C</h1>
  </header>

  <div class="post-content">
    <p>In this lab you will develop some general-purpose data structures that, with modular design, can be re-used for other labs - most notably, the Tiny Search Engine.</p>

<h3 id="assignment">Assignment</h3>

<p>You will write four modules, each of which defines a different data structure.</p>

<ol>
  <li>(20 points) <strong>bag</strong> of void*, which exports the following functions:
    <ul>
      <li><code class="highlighter-rouge">bag_t *bag_new(void);</code>
        <ul>
          <li>create a new empty bag data structure.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void bag_insert(bag_t *bag, void *data);</code>
        <ul>
          <li>add a new item to the bag.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void *bag_extract(bag_t *bag);</code>
        <ul>
          <li>remove any item from the bag and return it to the caller, or NULL if bag is empty.</li>
        </ul>
      </li>
      <li><em>A ‘bag’ is a collection of indistinguishable items; it starts empty, grows as the caller adds one item at a time, and shrinks as the caller extracts one item at a time. It could be empty, or could contain hundreds of items. Since items are indistinguishable, the module is free to return any item from the bag.</em></li>
    </ul>
  </li>
  <li>(30 points) <strong>set</strong> of (string,data) pairs, implemented as linked list, which exports the following functions:
    <ul>
      <li><code class="highlighter-rouge">set_t *set_new(void);</code>
        <ul>
          <li>create a new empty set data structure.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void *set_find(set_t *set, char *key);</code>
        <ul>
          <li>return data for the given key, or NULL if key is not found.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">bool set_insert(set_t *set, char *key, void *data);</code>
        <ul>
          <li>return <code class="highlighter-rouge">false</code> if key already exists, and <code class="highlighter-rouge">true</code> if new item was inserted.</li>
          <li>If <code class="highlighter-rouge">set</code> is NULL, or you encounter other error, return false.</li>
          <li><em>Copy the key string</em>, as in our <a href="/~cs50/examples/tree5">binary-tree example</a> in the <a href="/~cs50/Lectures/12-modules.html">lecture note</a>.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>(20 points) <strong>counters</strong>, implemented as a linked list, which exports the following functions:
    <ul>
      <li><code class="highlighter-rouge">counters_t *counters_new(void);</code>
        <ul>
          <li>create a new empty data structure.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void counters_add(counters_t *ctrs, int key);</code>
        <ul>
          <li>if key exists, increment its counter; otherwise add key and set its counter to 1.</li>
          <li>keys are all positive integers &gt;=0</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">int counters_get(counters_t *ctrs, int key);</code>
        <ul>
          <li>return the current value of the counter for key, or 0 if key is not found.</li>
          <li>keys are all positive integers &gt;=0</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void counters_delete(counters_t *ctrs);</code>
        <ul>
          <li>delete the whole data structure, and its contents.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>(30 points) <strong>hashtable</strong> of (string,data) pairs, implemented as array of slots with a list for each slot, which exports the following functions:
    <ul>
      <li><code class="highlighter-rouge">hashtable_t *hashtable_new(const int num_slots);</code>
        <ul>
          <li>create a new empty hash table data structure.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">void *hashtable_find(hashtable_t *ht, char *key);</code>
        <ul>
          <li>return data for the given key, or NULL if not found.</li>
        </ul>
      </li>
      <li><code class="highlighter-rouge">bool hashtable_insert(hashtable_t *ht, char *key, void *data);</code>
        <ul>
          <li>return <code class="highlighter-rouge">false</code> if key already exists, and <code class="highlighter-rouge">true</code> if new item was inserted.</li>
          <li>If <code class="highlighter-rouge">ht</code> is NULL, or you encounter other error, return false.</li>
          <li><em>Copy the key string</em>, as in our binary-tree example.</li>
          <li>You can write your own hash function, or copy mine:</li>
        </ul>

        <p><code class="highlighter-rouge">cp ~cs50/public_html/Labs/Lab3/jhash.[ch] .</code></p>
      </li>
    </ul>
  </li>
  <li>(20 points) <strong>Extra credit:</strong> add the following functions to the respective modules:
    <ul>
      <li><code class="highlighter-rouge">void bag_delete(bag_t *bag);</code></li>
      <li><code class="highlighter-rouge">void set_delete(set_t *set);</code></li>
      <li><code class="highlighter-rouge">void hashtable_delete(hashtable_t *ht);</code></li>
      <li>each deletes the whole data structure, and its contents.</li>
      <li><em>you will need to extend each <code class="highlighter-rouge">new</code> function to take a pointer to a ‘destructor’ function that operates on <code class="highlighter-rouge">void *data</code>;</em> it is the responsibility of the module user to supply a function (in simple cases, it might be just <code class="highlighter-rouge">free()</code>) that can deallocate the type of data item it has pushed into the data structure.</li>
    </ul>
  </li>
</ol>

<h3 id="what-to-hand-in">What to hand in</h3>

<p>Create a project on Gitlab, and make sure that you</p>

<ul>
  <li>establish a Gitlab user under the same name as your CS Unix username,</li>
  <li>name the project “lab3”,</li>
  <li>mark your project repository PRIVATE, and</li>
  <li>give the TAs (<code class="highlighter-rouge">Mbolonkin</code>, <code class="highlighter-rouge">sarroff</code>, <code class="highlighter-rouge">maieda17</code>, <code class="highlighter-rouge">emmaoberstein</code>, <code class="highlighter-rouge">tallmadged</code>, <code class="highlighter-rouge">0wang1</code>, <code class="highlighter-rouge">TomHaoChang</code>, <code class="highlighter-rouge">rliu</code>) and the instructor (<code class="highlighter-rouge">xia</code>) <em>master</em> access to your repository.</li>
</ul>

<p>Clone your Gitlab project to a local repository in <code class="highlighter-rouge">~/cs50/labs/lab3</code>, as in earlier labs. 
[<strong><em>Important:</em></strong> hide your homework from other users, with command <code class="highlighter-rouge">chmod 700 ~/cs50</code>.]
If you started work on the code before you set up your Gitlab project, that’s ok: Gitlab provides instructions for that case as shown in the <a href="/~cs50/Lectures/12-git">lecture notes</a>.</p>

<p>As you are working on the lab, you should regularly issue <code class="highlighter-rouge">git add ...</code>, <code class="highlighter-rouge">git commit ...</code>, and <code class="highlighter-rouge">git push</code>.  This allows you to ‘checkpoint’ your code from time to time, and roll back to earlier versions if needed.  When the deadline comes, we will ‘clone’ the code from your repository and use that for grading.  Presumably you will have some files, working or not, in the repository at the time of the deadline.</p>

<p>The repository should contain the following:</p>

<ul>
  <li>Four subdirectories:
    <ul>
      <li><code class="highlighter-rouge">bag</code> with <code class="highlighter-rouge">Makefile</code>, <code class="highlighter-rouge">bagtest.c</code>, <code class="highlighter-rouge">bag.c</code>, <code class="highlighter-rouge">bag.h</code>, <code class="highlighter-rouge">README</code>, <code class="highlighter-rouge">TESTING</code></li>
      <li><code class="highlighter-rouge">set</code> with <code class="highlighter-rouge">Makefile</code>, <code class="highlighter-rouge">settest.c</code>, <code class="highlighter-rouge">set.c</code>, <code class="highlighter-rouge">set.h</code>, <code class="highlighter-rouge">README</code>, <code class="highlighter-rouge">TESTING</code></li>
      <li><code class="highlighter-rouge">counters</code> with <code class="highlighter-rouge">Makefile</code>, <code class="highlighter-rouge">counterstest.c</code>, <code class="highlighter-rouge">counters.c</code>, <code class="highlighter-rouge">counters.h</code>, <code class="highlighter-rouge">README</code>, <code class="highlighter-rouge">TESTING</code></li>
      <li><code class="highlighter-rouge">hashtable</code> with <code class="highlighter-rouge">Makefile</code>, <code class="highlighter-rouge">hashtabletest.c</code>, <code class="highlighter-rouge">hashtable.c</code>, <code class="highlighter-rouge">hashtable.h</code>, <code class="highlighter-rouge">README</code>, <code class="highlighter-rouge">TESTING</code></li>
    </ul>
  </li>
  <li>Each <code class="highlighter-rouge">README</code> (or <code class="highlighter-rouge">README.md</code>) explains any assumptions and acknowledges any limitations.</li>
  <li>Each <code class="highlighter-rouge">TESTING</code> (or <code class="highlighter-rouge">TESTING.md</code>) shows how you tested the module.</li>
  <li>Include any special input files you used for testing.</li>
</ul>

<p><strong><em>Your code must compile with <code class="highlighter-rouge">make</code> and produce no compiler warnings.</em></strong></p>

<h3 id="how-to-request-an-extension">How to request an extension</h3>

<p>If you are not finished by the due date, and want to claim your 48h extension, create a file <code class="highlighter-rouge">EXTENSION</code> at the top-level directory of your repository. Don’t forget to <code class="highlighter-rouge">git push</code> <em>before the deadline!</em>, so we will see the file.
For example,</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>touch EXTENSION
<span class="gp">$ </span>git add EXTENSION
<span class="gp">$ </span>git commit -m <span class="s2">"extension request"</span>
<span class="gp">$ </span>git push
</code></pre>
</div>

<p><strong><em>Important!</em></strong> When you are ready to submit your code, remove <code class="highlighter-rouge">EXTENSION</code>.  We pull a copy of your repository at the moment of the deadline, and once every 24h thereafter until the file is gone; your lab will not be graded as long as it contains an <code class="highlighter-rouge">EXTENSION</code> file.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>git rm EXTENSION
<span class="gp">$ </span>git commit EXTENSION
<span class="gp">$ </span>git push
</code></pre>
</div>

<h3 id="coding-style">Coding style</h3>

<p>Please follow the <a href="/~cs50/Resources/CodingStyle.html">CS50 coding style guidelines</a>.</p>

<p><strong><em>Your code must compile with no compiler warnings.</em></strong></p>

<h3 id="hints">hints</h3>

<p>You can learn a lot from our <a href="/~cs50/examples/tree6">tree6</a> example.</p>

<p>I suggest implementing the <em>bag</em> and <em>counters</em> as simplified linked lists.  (Both are simpler than the <em>set</em> module.)</p>

<p>Your <em>hashtable</em> module should make use of the <em>set</em> data structure.</p>

<p>Function pointers are not needed for any of the four data structures - only if you do the extra credit.</p>

<p><strong><em>Linked lists</em></strong> were demonstrated in <a href="/~cs50/examples/names6.c">names6.c</a>, although for a specialized case; you will need to generalize.
They were also covered in CS10: <a href="http://www.cs.dartmouth.edu/~traviswp/cs10/lectures/9/9.html">Written notes</a>.</p>

<p><strong><em>Hashtables were covered in CS10:</em></strong> 
<a href="http://www.cs.dartmouth.edu/~traviswp/cs10/lectures/18/18.html">Written notes</a>,
<a href="http://www.cs.dartmouth.edu/~traviswp/cs10/lectures/18/resources/lecture18.pdf">Slides</a>.</p>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">CS50 Summer 2016 -- Dartmouth College</h2>

    <p> <font size=-1> 
    	This version of the course is based upon those designed by 
    	Professors Kotz, Palmer, Campbell, and Balkcom. 
	I am deeply indebted to these outstanding educators.
    -- <a href="/~xia/">Xia Zhou</a>
       </font> 
    </p>

  </div>

</footer>


  </body>

</html>
