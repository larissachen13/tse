http://old-www.cs.dartmouth.edu/~cs50/Labs/Lab2.html
3
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Lab2 - C Programming</title>
  <meta name="description" content="In Computer Science 50 you will learn how to design & build large,  reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="stylesheet" href="/~cs50/css/main.css">
  <link rel="canonical" href="http://www.cs.dartmouth.edu/~cs50/Labs/Lab2.html">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/~cs50/">CS50 Summer 2016</a>

    <nav class="site-nav">

      [<a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a>]
      [<a href="https://piazza.com/dartmouth/summer2016/cs50/home">Piazza</a>]
      [<a href="https://gitlab.cs.dartmouth.edu">Gitlab</a>]
      [<a href="/~cs50/Schedule.pdf">Schedule</a>]
      [<a href="/~cs50/Lectures/">Lectures</a>]
      [<a href="/~cs50/Reading/">Reading</a>]
<!--      [<a href="/~cs50/examples/">Examples</a>]  -->
      [<a href="/~cs50/Logistics/">Logistics</a>]
      [<a href="/~cs50/Resources/">Resources</a>]
      [<a href="/~cs50/Labs/">Labs</a>]
      [<a href="/~cs50/Project/">Project</a>]

   </nav>
</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Lab2 - C Programming</h1>
  </header>

  <div class="post-content">
    <h1 id="lab-assignment-2-first-c-programs">Lab Assignment 2: First C Programs</h1>

<p>lab2 comprises three C programming problems. They start easy and get progressively more difficult.</p>

<p>This lab will cover many aspects of the C language discussed in class: pointers, string handling, file operations, reading input from the command line, writing to the display, and so forth.</p>

<p>These exercises will help develop your C programming skills. Grading will focus on the correctness of your solutions, but will also consider good coding style - including consistent formatting, selection of identifier names, and use of meaningful comments.</p>

<h2 id="submitting-this-assignment">Submitting this assignment</h2>

<p>The following sequence of Linux commands should be used to prepare your work on one of the <a href="http://www.cs.dartmouth.edu/~wbc/suditour/011/index.html">CS Linux systems</a> for submission in Canvas by the deadline. If you choose to submit your work from some other system, you are responsible to ensure (a) that the work you submit runs correctly on a CS system where we will test it, and (b) that your work will arrive in Canvas before the deadline.</p>

<ul>
  <li>
    <p>Change to your labs directory <code class="highlighter-rouge">cd ~/cs50/labs</code>. This directory should be the parent directory containing all your lab work, including your <code class="highlighter-rouge">lab2</code> directory where the three subdirectories containing your solutions for this lab assignment may be found.  You are required to use this directory structure.</p>
  </li>
  <li>
    <p><strong><em>Reminder:</em></strong> hide your homework from other users, with command <code class="highlighter-rouge">chmod 700 ~/cs50</code>.</p>
  </li>
</ul>

<div class="highlighter-rouge"><pre class="highlight"><code>cs50
|-- labs
|   |-- lab1
|   |   |-- answers.txt
|   |   |-- artist.sh
|   |   `-- photopage.sh
|   `-- lab2
|       |-- chill
|       |-- dog
|       `-- weather
`-- project
</code></pre>
</div>

<ul>
  <li>
    <p>In addition to <code class="highlighter-rouge">.c</code> and <code class="highlighter-rouge">.h</code> files, each of the three subdirectories of <code class="highlighter-rouge">lab2</code> must include two simple text files:</p>

    <p>a.  <code class="highlighter-rouge">README</code> (or <code class="highlighter-rouge">README.md</code>),
     which describes how your program should be compiled and executed, along with an explanation of any assumptions you made about the assignment.   See my <a href="/~cs50/examples/subtemplate-README.txt">example README file</a>.</p>

    <p>b.  <code class="highlighter-rouge">TESTING</code>,
     which describes how you tested the program, including test inputs and test scripts; these test inputs and test scripts should be included as files in the same directory.</p>
  </li>
</ul>

<blockquote>
  <p>See my <a href="/~cs50/examples/subtemplate-TESTING.txt">example TESTING file</a>; in that case I would not need to include testing inputs because they were CS50-provided files, or generated within the testing file itself.  (I created this file in MacOS Terminal by choosing “Export Text As…” from the Shell menu when I had finished all my testing commands, then editing it with emacs to add the comments.</p>
</blockquote>

<ul>
  <li>When you have completed your work on the three programming assignments, <code class="highlighter-rouge">cd ~/cs50/labs</code> and issue the following commands:</li>
</ul>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span><span class="nb">pwd</span>         
/net/.../youruserid/cs50/labs
<span class="gp">$ </span>tar -czvf <span class="nv">$USER</span>-lab2.tar.gz lab2   
</code></pre>
</div>

<p>Recall the section on creating <code class="highlighter-rouge">tar</code> archives (commonly referred to as “tarballs”) in <a href="/~cs50/Lectures/03-shellcontinued.html">Lecture 3</a>. After creating a <code class="highlighter-rouge">tar</code> archive it’s always a good practice to check that everything looks right using the <code class="highlighter-rouge">-t</code> (test) option of <code class="highlighter-rouge">tar</code> like this:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>    tar -tzf <span class="nv">$USER</span>-lab2.tar.gz 
</code></pre>
</div>
<p>These options specify that <code class="highlighter-rouge">tar</code> should just test (<code class="highlighter-rouge">t</code>) the tar file (<code class="highlighter-rouge">f</code>) and show its contents.</p>

<ul>
  <li>When you have created and tested the <code class="highlighter-rouge">tar</code> archive of your work, upload it via the Lab 2 assignment screen of Canvas and submit it.</li>
</ul>

<p><strong><em>If you wish to use one of your 48-hour extensions,</em></strong> upload a simple text file (it may even be empty) called <code class="highlighter-rouge">EXTENSION</code> instead of a tarball; you must upload it before the deadline!</p>

<p><strong>Note:</strong> You may use a system other than one of the <a href="http://www.cs.dartmouth.edu/~wbc/suditour/011/index.html">CS Linux systems</a> to develop your solutions. Remember, however, that we will test and grade your program on one of the <a href="http://www.cs.dartmouth.edu/~wbc/suditour/011/index.html">CS Linux systems</a>. If your solution does not work there, it does not work as far as grading is concerned.</p>

<h2 id="coding-style">Coding style</h2>

<p>Please refer to the <a href="/~cs50/Resources/CodingStyle.html">CS50 coding style</a>.</p>

<h2 id="assignment-details">Assignment details</h2>

<p>Design, write, document, and <strong>fully test</strong> the following three separate C programs.</p>

<p><strong><em>Point breakdown:</em></strong></p>

<ul>
  <li>(30 points) chill.c</li>
  <li>(40 points) dog.c</li>
  <li>(30 points) weather.c</li>
</ul>

<h2 id="chillc">(1) chill.c</h2>

<p>Write a program to calculate “wind chill” based on the current temperature and wind speed. The standard formula for this calculation is:</p>

<pre><code class="language-Matlab">    Wind Chill = 35.74 + 0.6215T - 35.75(V^0.16) + 0.4275T(V^0.16)
</code></pre>

<p>where <code class="highlighter-rouge">T</code> is the temperature in degrees Fahrenheit (when less than 50) and <code class="highlighter-rouge">V</code> is the wind velocity in miles per hour. The <code class="highlighter-rouge">^</code> character denotes exponentiation. You should note that the above formula is <em>not</em> in C programming language syntax.</p>

<p>The user may run your program with no arguments, one argument, or two arguments as explained below:</p>

<h4 id="no-arguments">no arguments</h4>

<p>If the user provides no arguments to your program, it should print out a table of temperatures (from -10 to +40 by 10’s) and wind speeds (from 5 to 15 by 5’s). Your output should look similar to the following, with nice columns and titles:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>    <span class="nv">$ </span>./chill
    Temp    Wind    Chill
    ----    ----    -----
     -10       5    -22.3
     -10      10    -28.3
     -10      15    -32.2

       0       5    -10.5
       0      10    -15.9
       0      15    -19.4

      10       5     1.2
      10      10    -3.5
      10      15    -6.6

      20       5     13.0
      20      10     8.9
      20      15     6.2

      30       5     24.7
      30      10     21.2
      30      15     19.0

      40       5     36.5
      40      10     33.6
      40      15     31.8
</code></pre>
</div>

<h4 id="one-argument">one argument</h4>

<p>If the user provides one argument, it will assumed to be a temperature. If that temperature is less than 50 it is acceptable and a table of wind speeds (from 5 to 15 by 5’s) and the calculated wind chills will be printed <em>for that temperature</em> only. Your program’s output for one argument should look like this:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>    <span class="nv">$ </span>./chill 32
     Temp   Wind   Chill
    -----   ----   -----
      32      5     27.1
      32     10     23.7
      32     15     21.6
</code></pre>
</div>

<h4 id="two-arguments">two arguments</h4>

<p>If the user provides two arguments, they will be temperature and velocity, respectively. The temperature must be less than 50 and no less than -10. The velocity must be greater than or equal to 0.5 and no greater than 15.</p>

<p>If the arguments are acceptable, then your program should calculate and print the wind chill for <em>that temperature and velocity</em> only.</p>

<p>Your program’s output for two arguments should look like this:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>    <span class="nv">$ </span>./chill 5 15
     Temp    Wind   Chill
     -----   ----   -----
        5     15    -13.0
</code></pre>
</div>

<p>If either argument is out of range, your program should issue a message and exit. Here’s an example:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>    <span class="nv">$ </span>./chill 55
    Temperature must be less than 50 degrees Fahrenheit

    <span class="nv">$ </span>./chill 10 0
    Wind velocity must be greater than or equal to 0.5 MPH
</code></pre>
</div>

<blockquote>
  <p>In the preceding examples some values were printed as integers and some as decimal fractions. You may print everything in the format “x.y”, if you wish, but do not print more than one decimal place.  Indeed, it may be wise to use this format when the user specifies temperature or windspeed, because the user may specify a non-integral value and it may be misleading to print it as an integer.</p>
</blockquote>

<h2 id="dogc">(2) dog.c</h2>

<p>Write a program that provides <em>some</em> of the functionality of the Unix <code class="highlighter-rouge">cat</code> command plus a couple of extras. Experiment with <code class="highlighter-rouge">cat</code> and study <code class="highlighter-rouge">man cat</code> to understand what it can do.</p>

<h3 id="usage">usage</h3>
<div class="language-bash highlighter-rouge"><pre class="highlight"><code>dog <span class="o">[</span>--help]
</code></pre>
</div>
<p>prints useful help information about the usage of your program.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>dog <span class="o">[</span>-n] <span class="o">[</span>-m mapfile] <span class="o">[</span>-M mapfile] <span class="o">[</span>-] <span class="o">[</span>filename]...
</code></pre>
</div>
<p>where</p>

<ul>
  <li><code class="highlighter-rouge">-n</code> numbers output lines; see below.</li>
  <li>at most one of <code class="highlighter-rouge">-m</code> and <code class="highlighter-rouge">-M</code> may be specified; see below.</li>
  <li>the options <code class="highlighter-rouge">n</code>, <code class="highlighter-rouge">m</code>, or <code class="highlighter-rouge">M</code> may be specified in any order, but all must come before any filenames.</li>
  <li>zero or more filenames may be specified.</li>
  <li>the special filename <code class="highlighter-rouge">-</code> may be specified at any point in the list of filenames.</li>
</ul>

<p>More details about each command-line argument follow.</p>

<blockquote>
  <p>If your program terminates normally, it should exit with a return code  of <code class="highlighter-rouge">0</code>. Otherwise, it should terminate with a documented, non-zero return code.</p>
</blockquote>

<h3 id="filename">filename…</h3>

<p>When no filenames are given on the command line, <code class="highlighter-rouge">dog</code> reads from stdin and writes to stdout.</p>

<p>When one or more filenames are given on the command line, <code class="highlighter-rouge">dog</code> reads from each file in sequence, and writes to stdout.</p>

<p>If the special filename <code class="highlighter-rouge">-</code> is given as one of the filenames, the stdin is read at that point in the sequence, and written to stdout.</p>

<blockquote>
  <p>Even if the contents of the file aren’t suitable for printing on the display (i.e., the file is not a text file), <code class="highlighter-rouge">dog</code> should nonetheless copy the contents of the file to stdout.</p>
</blockquote>

<blockquote>
  <p>Note this means you should not think of the file as a sequence of lines, or even as text; think of it as a sequence of characters.</p>
</blockquote>

<h3 id="n">-n</h3>

<p>With the option <code class="highlighter-rouge">-n</code>, <code class="highlighter-rouge">dog</code> will begin each output line with a line number corresponding to its position in the output.</p>

<h3 id="m-mapfile">-m mapfile</h3>

<p>With the option <code class="highlighter-rouge">-m mapfile</code>, <code class="highlighter-rouge">dog</code> will use a simple substitution cipher to weakly encrypt its inputs. The file specified (i.e., <code class="highlighter-rouge">mapfile</code>) should contain 26 lines containing pairs of letters where the first letter is a plaintext letter and the second is the ciphertext equivalent. As the characters are read from the input(s), each letter should be transformed according to the corresponding mapping in the <code class="highlighter-rouge">mapfile</code>. For example, if you want ‘a’ to become ‘e’, ‘B’ to become ‘Z’, ‘c’ to become ‘q’, and so forth, the <code class="highlighter-rouge">mapfile</code> would include these lines:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>a  e
B  Z
c  q
...    
</code></pre>
</div>

<p>The case (upper or lower) of the input characters should be maintained. That is, if an uppercase ‘B’ is input for the example mapfile above, then an uppercase ‘Z’ should be output, and if a lowercase c is input, then a lowercase ‘q’ should be output.</p>

<p>Any assumptions you make about how the input is handled should also be documented in your README file.</p>

<h3 id="m-mapfile-1">-M mapfile</h3>

<p>With the option <code class="highlighter-rouge">-M mapfile</code>, <code class="highlighter-rouge">dog</code> will decipher its input(s) back into plaintext. Thus, the <code class="highlighter-rouge">mapfile</code> is read and the opposite procedure is used to decipher the input.</p>

<h3 id="notes">Notes:</h3>

<ul>
  <li>
    <p>For the <code class="highlighter-rouge">-m</code> and <code class="highlighter-rouge">-M</code> options be sure you have a reasonable and <strong>documented</strong> procedure for handling incomplete or inconsistent mapfiles.  For example, you could issue an error, follow a well-documented default behavior, or other clearly explained action.</p>
  </li>
  <li>
    <p>If both the <code class="highlighter-rouge">-m</code> and <code class="highlighter-rouge">-M</code> options are specified on the same command line, you should issue an error message and exit.</p>
  </li>
  <li>
    <p>You need only encipher the 26 letters of the English alphabet for this  assignment. However, if the <code class="highlighter-rouge">mapfile</code> includes mappings for digits or punctuation or other ASCII characters, <code class="highlighter-rouge">dog</code> could operate properly and predictably. If you choose to implement this <em>optional extension</em>, your documentation should reflect this expected behavior.</p>
  </li>
</ul>

<h3 id="tips">Tips:</h3>

<p>Process all of the options, recording their implications in variables and data structures, before starting work on processing the list of filenames.  This way, if there is any error in processing the options, you can exit with a suitable error message before reading any files and printing anything to stdout.</p>

<h2 id="weatherc">(3) weather.c</h2>

<p>Write a program that will request a weather report from NOAA’s <code class="highlighter-rouge">weather.gov</code> site for a specified location and print some portions of the response, suitably formatted. <strong>Usage:</strong></p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>weather CODE
</code></pre>
</div>
<p>where <code class="highlighter-rouge">CODE</code> is a four-letter weather-station code.</p>

<p>The NOAA weather report system provides current reports from sites identified by a four-letter code. For example, the Mount Washington weather station code is “KMWN” and the one for Lebanon Airport is “KLEB”. You can look up station codes <a href="http://w1.weather.gov/xml/current_obs/seek.php?state=">here</a>.</p>

<p>Your program should expect one (exactly one) of these four-character station codes as an argument, but verifying its validity is beyond the scope of this assignment. Your program will incorporate the station code into a special URL that is used to make the queries to the NOAA site. Here is a string you could use with <code class="highlighter-rouge">sprintf()</code> to get the station code into the URL:</p>

<div class="language-http highlighter-rouge"><pre class="highlight"><code><span class="err">http://w1.weather.gov/xml/current_obs/%s.xml
</span></code></pre>
</div>

<p>The four-character code should replace the <code class="highlighter-rouge">%s</code> in that format string. For example, to request the weather for station KMWN, the string would be</p>

<div class="language-http highlighter-rouge"><pre class="highlight"><code><span class="err">http://w1.weather.gov/xml/current_obs/KMWN.xml
</span></code></pre>
</div>

<p>If you enter the above URL into your browser, the weather report for Mount Washington, NH should appear. All the location codes are four upper-case letters.</p>

<p>To send the special URL to the NOAA site (and to receive the response) your program will use the open-source <code class="highlighter-rouge">libcurl</code> library. It is already installed on all the lab machines and is freely available for other platforms if you need to install it somewhere else. To enable its use you should include its header file at the top of your program files like this</p>

<div class="language-c highlighter-rouge"><pre class="highlight"><code><span class="cp">#include &lt;curl/curl.h&gt;
</span></code></pre>
</div>

<p>and be sure to instruct the linker to include the curl library using the <code class="highlighter-rouge">-l</code> option on the <code class="highlighter-rouge">gcc</code> command line you use to build the final executable code:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>gcc -o weather .... -lcurl ...
</code></pre>
</div>

<p><strong>It is <em>very</em> important that you learn how to use this library as it will be used in the tiny search engine (labs 3-5)!</strong></p>

<p>There are <code class="highlighter-rouge">man</code> pages for <code class="highlighter-rouge">libcurl</code>, but you will likely find this <a href="http://curl.haxx.se/libcurl/c/libcurl-tutorial.html">tutorial</a> easier to follow.</p>

<p>You will use five of the library functions it provides:</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">curl_easy_init()</code> obtains a curl handle used in all other functions (like what <code class="highlighter-rouge">fopen()</code> returns for use in other file I/O functions).</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">curl_easy_setopt()</code> used to set the various options for the curl library.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">curl_easy_perform()</code> sends the URL request to the web server.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">curl_easy_strerror()</code> returns a meaningful error message string when one of the <code class="highlighter-rouge">libcurl</code> calls fails, similar to <code class="highlighter-rouge">strerror()</code>.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">curl_easy_cleanup()</code> frees all the resources being used by a curl handle.</p>
  </li>
</ul>

<p>You can read about these in more detail online. The <code class="highlighter-rouge">curl_easy_setopt()</code> function is particularly important. You will use it to :</p>

<ul>
  <li>set the URL you want to fetch</li>
  <li>specify a function that <code class="highlighter-rouge">libcurl</code> will call to handle the data returned from the remote system.</li>
  <li>specify where <code class="highlighter-rouge">libcurl</code> should put the returned data and its length.</li>
</ul>

<p>Two files, <a href="/~cs50/examples/mycurl.c">mycurl.c</a> and <a href="/~cs50/examples/mycurl.h">mycurl.h</a>, are provided for your use. They include two functions, <code class="highlighter-rouge">init_curlResponse()</code> and <code class="highlighter-rouge">writefunc()</code> that you should use with <code class="highlighter-rouge">libcurl</code>. These functions were extracted/adapted from the <code class="highlighter-rouge">libcurl</code> <a href="https://curl.haxx.se/libcurl/c/example.html">examples</a>.</p>

<p>Your main code should look something like this:</p>

<div class="language-c highlighter-rouge"><pre class="highlight"><code><span class="cm">/* ... */</span>

<span class="cp">#include "mycurl.h"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="cm">/* local variables */</span>

    <span class="cm">/* check args */</span>

    <span class="cm">/* curl stuff */</span>
    <span class="n">CURL</span> <span class="o">*</span><span class="n">curl</span><span class="p">;</span>
    <span class="n">CURLcode</span> <span class="n">res</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">curlResponse</span> <span class="n">s</span><span class="p">;</span>
    <span class="cm">/* Format string for the URL we will request */</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">APIurl</span>  <span class="o">=</span> <span class="s">"http://w1.weather.gov/xml/current_obs/%s.xml"</span><span class="p">;</span>

    <span class="cm">/* allocate and initialize the output area */</span>
    <span class="n">init_curlResponse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

    <span class="cm">/* create the URL from the format string */</span>
    <span class="cm">/* ... */</span>

    <span class="cm">/* initialize curl */</span>
    <span class="n">curl</span> <span class="o">=</span> <span class="n">curl_easy_init</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="n">curl</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/* set the URL we want to visit */</span>
        <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_URL</span><span class="p">,</span> <span class="o">???</span> <span class="p">);</span>

        <span class="cm">/* weather.gov expects USERAGENT option */</span>
        <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_USERAGENT</span><span class="p">,</span> <span class="s">"cs50"</span><span class="p">);</span>

        <span class="cm">/* set the function curl should call with the result */</span>
        <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_WRITEFUNCTION</span><span class="p">,</span> <span class="n">writefunc</span><span class="p">);</span>
        <span class="cm">/* set the buffer into which curl should place the data */</span>
        <span class="n">curl_easy_setopt</span><span class="p">(</span><span class="n">curl</span><span class="p">,</span> <span class="n">CURLOPT_WRITEDATA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>

        <span class="cm">/* Perform the request, res will get the return code */</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">curl_easy_perform</span><span class="p">(</span><span class="n">curl</span><span class="p">);</span>
        <span class="cm">/* make sure it worked */</span>

        <span class="cm">/* check: if the weather station code wasn't found, */</span>
        <span class="cm">/* we get back HTML instead of XML  */</span>

        <span class="cm">/* otherwise, select the desired output from the results */</span>

        <span class="cm">/* always cleanup */</span>
        <span class="n">curl_easy_cleanup</span><span class="p">(</span><span class="n">curl</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">??</span> <span class="p">;</span>
<span class="p">}</span>

<span class="p">...</span> <span class="n">define</span> <span class="n">the</span> <span class="n">writefunc</span> <span class="n">function</span> <span class="n">and</span> <span class="n">other</span> <span class="n">helper</span> <span class="n">functions</span>
</code></pre>
</div>

<blockquote>
  <p>Notice the use of a function pointer - that is, passing the name of a function into <code class="highlighter-rouge">curl_easy_setopt</code> as a parameter.  Your function will later get called when there is data ready to report.</p>

  <p>You might want to push the curl-handling code into a separate function, so <code class="highlighter-rouge">main</code> doesn’t grow so large.  See the <a href="/~cs50/Resources/CodingStyle.html">CS50 style guide</a>.</p>
</blockquote>

<p>When the NOAA website receives your request, it searches for a weather report for the station code you sent. If a report is found for that station code, it is returned to you in XML format (more on that later). If no report is found for the location code you provided, a standard HTML page is returned. Your program will need to determine which kind of response is being returned. The easiest way to do that is to examine the first five characters of the response - if those characters are “<code class="highlighter-rouge"><span class="err">&lt;</span>?xml</code>” then the weather report was retrieved successfully. Otherwise, the report was not found. An error could be the result of looking for a nonexistent station code or due to a reporting station being unavailable for an extended period. If this occurs, your program should do something appropriate.</p>

<p>If the report was retrieved successfully, then the URL request was received safely and a response sent back to you. To see what the full unprocessed response looks like you can print the character string stored at <code class="highlighter-rouge">s.ptr</code> after the <code class="highlighter-rouge">curl_easy_perform()</code> successfully completes. This string at <code class="highlighter-rouge">s.ptr</code> is what you will need to scan to pick out the nine specific pieces of weather information required for this assignment: <code class="highlighter-rouge">credit</code>, <code class="highlighter-rouge">location</code>, <code class="highlighter-rouge">station_id</code>, <code class="highlighter-rouge">observation_time</code>, <code class="highlighter-rouge">weather</code>, <code class="highlighter-rouge">temperature_string</code>, <code class="highlighter-rouge">relative_humidity</code>, <code class="highlighter-rouge">wind_string</code>, and <code class="highlighter-rouge">visibility_mi</code>.</p>

<p>Here is an example of what your program’s output might look like.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">$ </span>./weather
./weather needs one arg, a location code like KMWN.  To look up location codes, see http://w1.weather.gov/xml/current_obs/seek.php?state<span class="o">=</span>

<span class="gp">$ </span>./weather KMWNN
Location code must be 4 characters.

<span class="gp">$ </span>./weather KWMN
That station code &lt;KWMN&gt; could not be found

<span class="gp">$ </span>./weather KMWN
    credit: NOAA National Weather Service
    location: Mount Washington, NH
    station_id: KMWN
    observation_time: Last Updated on Mar 1 2015, 1:50 pm EST
    weather: Overcast and Windy
    temperature_string: 10.0 F <span class="o">(</span>-12.0 C<span class="o">)</span>
    relative_humidity: 52
    wind_string: from the West at 51.8 gusting to 57.5 MPH <span class="o">(</span>45 gusting to 50 KT<span class="o">)</span>
    visibility_mi: 75.00

<span class="err">$</span>
</code></pre>
</div>

<p>If you want to make the program output more appealing, that’s fine as long as you report the same 9 values as shown. Don’t forget to test you program’s ability to handle missing or bad parameters (too long, too short, station not found, and so forth).</p>

<p>As always, any assumptions you make should be documented in your <code class="highlighter-rouge">README</code> file and your testing procedure should be documented in your <code class="highlighter-rouge">TESTING</code> file.</p>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">CS50 Summer 2016 -- Dartmouth College</h2>

    <p> <font size=-1> 
    	This version of the course is based upon those designed by 
    	Professors Kotz, Palmer, Campbell, and Balkcom. 
	I am deeply indebted to these outstanding educators.
    -- <a href="/~xia/">Xia Zhou</a>
       </font> 
    </p>

  </div>

</footer>


  </body>

</html>
