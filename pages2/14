http://old-www.cs.dartmouth.edu/~cs50/Lectures/01-gettingstarted.html
3
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Lecture 01 - First look at Unix, the shell, and C</title>
  <meta name="description" content="In Computer Science 50 you will learn how to design & build large,  reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="stylesheet" href="/~cs50/css/main.css">
  <link rel="canonical" href="http://www.cs.dartmouth.edu/~cs50/Lectures/01-gettingstarted.html">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/~cs50/">CS50 Summer 2016</a>

    <nav class="site-nav">

      [<a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a>]
      [<a href="https://piazza.com/dartmouth/summer2016/cs50/home">Piazza</a>]
      [<a href="https://gitlab.cs.dartmouth.edu">Gitlab</a>]
      [<a href="/~cs50/Schedule.pdf">Schedule</a>]
      [<a href="/~cs50/Lectures/">Lectures</a>]
      [<a href="/~cs50/Reading/">Reading</a>]
<!--      [<a href="/~cs50/examples/">Examples</a>]  -->
      [<a href="/~cs50/Logistics/">Logistics</a>]
      [<a href="/~cs50/Resources/">Resources</a>]
      [<a href="/~cs50/Labs/">Labs</a>]
      [<a href="/~cs50/Project/">Project</a>]

   </nav>
</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Lecture 01 - First look at Unix, the shell, and C</h1>
  </header>

  <div class="post-content">
    <h1 id="welcome-to-cs50">Welcome to CS50!</h1>

<p>In this lecture, we discuss the aim and schedule of the course, and take a brief look at Unix, C programming, and computer architecture.</p>

<h2 id="the-course">The course</h2>

<p>The aim of this course is to develop the necessary systems programming skills in C and Unix as a foundation to tackle the design, implementation, and integration of a large software project working in small teams. The challenge of the course is to quickly get people up to speed so there is sufficient time to get into the details of a complex software design project. The first part of the course serves to develop design, programming and other systems skills such as source-code management, testing, and debugging. The second part of the course is all about the project and team work. Good team work will lead to success. That’s the message.</p>

<p>A note about Unix/Linux: Unix came first. All of the others, including Solaris, AIX, BSD and all the variants of Linux, are derivations of that original effort. While we use Linux on the Sudikoff servers, you may elect to use your own copy of Linux or the Unix that Mac OSX is based on. So, unless it <em>really</em> matters, I will use the term Unix to refer to them all.</p>

<p>The syllabus in a nutshell:</p>

<ul>
  <li>Unix: shell, commands, shell programming;</li>
  <li>C: structure, arrays, pointers, dynamic memory, files;</li>
  <li>Programming tools: gcc (GNU compiler), make (maintain groups of programs), gdb (GNU debugger), git (source code management), gprof (GNU execution profile), valgrind (profiling and memory leak checker).</li>
  <li>Software development methodology: design, implement, unit test/debug, integration, demo, maintenance.</li>
  <li>Thematic programming assignments: building a search engine (crawler, indexer, query engine) - you can be Google too!</li>
  <li>If time permits, we’ll look at selected additional topics, such as the new C11 standard (2011), agile development, and others.</li>
  <li>Team project: it’s a surprise!</li>
</ul>

<p>The course includes six Unix shell and C programming assignments for the first part of the course; these assignments are to be done individually. The last part (about 3 weeks) is devoted to the team project. There are fewer lectures in the last part of the course but the projects are run with design reviews and progress meetings where the team can brainstorm problems and come up with solutions. There will be a common project goal for all teams, but students are free to develop their own ideas beyond this common goal - show your entrepreneurial side!</p>

<p>Please take note of the <a href="/~cs50/Reading">reading assigned</a> each week.  I will list the reading week by week, rather than lecture by lecture, to give you some flexibility – but please do the reading, you’ll find it to be interesting and valuable!</p>

<h2 id="logistics">Logistics</h2>

<p>Go over the <a href="/~cs50/Logistics">Logistics</a> information.</p>

<p><strong>About the programming:</strong> <em>There is a significant amount of programming in this course requiring a considerable time commitment on the part of the student.</em> You will need to be well organized to complete all the programming assignments and project. It will be challenging, but we hope it will be fun - you will certainly learn a set of new skills that will be very useful in the software industry or in any profession where deep coding skills are valuable.</p>

<p><strong>About the project</strong>:
The project is made up of a small team of 3-4 students and requires strong collaboration and a problem-solving mindset to get the job done. The instructor will put together the teams (to balance skill sets) with each member being responsible to deliver against a part of the overall system design, implementation, testing, integration, and documentation. The goal of this activity is to help you develop the confidence, skills, and habits necessary to write large computer programs while being part of a multi-person team. You will become conversant in software engineering paradigms, such as source code control with <code class="highlighter-rouge">git</code> and other open source tools that ease the software development process. In addition, you will develop vital skills in self-directed learning, problem solving, and communication.  At the end of the term, the project will have a demo and a design and code review. A project report that captures the design and implementation will be submitted as part of the assessment.  All members of the team get the same base grade, but we assess each member’s collaboration and real contribution to the project for the second part of the project grade. Our assessment is aided by a short evaluation form completed by all members of each project team.</p>

<h2 id="goals-for-todays-lecture">Goals for today’s lecture</h2>

<p>We plan to cover the following in today’s lecture:</p>

<ul>
  <li>Logging on to a Unix machine;</li>
  <li>Looking at the home directory and its files;</li>
  <li>Copying files to/from remote machines;</li>
  <li>Logging out; and</li>
  <li>Some housekeeping business.</li>
</ul>

<p>In the first few lectures we cover Unix, the shell, and shell programming. This is not meant to be a detailed presentation of the Unix OS and its programming tools – it would require a whole term to cover all that material in detail. We need to know enough about Unix and its tools to be able to navigate our way around the system, write some basic shell scripts, and use its programming tools.</p>

<p>It is important that you use these notes as a starting point, but like any budding hacker you need to do some experimenting and read up on the details. You need to go on the web and find information if there are gaps in your knowledge, and then come see the instructor or TAs for help if you’re still stuck. There are many references on the <a href="/~cs50/Resources">Resources</a> page.</p>

<p><strong>Caveat</strong>: Please take note that lecture notes will not always be detailed. You will need to augment these notes with your own comments and by using the references and reading assignments so you can dive deeper into the topic. We will be discussing the reading assignments during each week!</p>

<h2 id="the-command-line">The command line</h2>

<p>Unix was originally developed for computers with hardwired ‘terminals’, each of which was basically an electronic typewriter - a printer with a keyboard. There were no graphical displays, and the concepts of ‘windows’ and ‘mouse’ had not yet been invented. To interact with the computer, the user types on the keyboard, and the computer echos the keystrokes on the paper. The system is controlled by typing ‘commands’, most of which print results for the user to see. The interaction occurs over the ‘command line’.</p>

<p>Modern Unix systems support rich graphical user interfaces, but under the hood they all support the command line.  In this class, I will demonstrate everything using the MacOS command line, accessed via the MacOS application called <code class="highlighter-rouge">Terminal</code>.  If you have a Mac, you can follow along.  If you use Windows, consider installing Linux on your laptop (either ‘dual boot’ or ‘virtual machine’).  But all of us can (and will) also use the department’s Linux servers.</p>

<p>When I open a new Terminal window on my Mac, I can type Unix commands at the ‘prompt’.  This prompt is from the ‘shell’ – a program – that interprets your command line and runs a program representing each command. Your prompt may look different - the shell allows users to customize prompts and you’ll see a few formats in the examples below.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>Last login: Tue Jun 14 20:20:32 2016 from 75.69.132.20
<span class="o">[</span>cs50@tahoe ~]<span class="nv">$ </span>ls
Archive/  data/  dotfiles/  public_html/
<span class="o">[</span>cs50@tahoe ~]<span class="nv">$ </span><span class="nb">echo </span>Hello CS50
Hello CS50
<span class="o">[</span>cs50@tahoe ~]<span class="nv">$ </span> 
</code></pre>
</div>

<p>The <code class="highlighter-rouge">ls</code> command is the “list directory contents” command. 
The <code class="highlighter-rouge">echo</code> command is like a print statement - it echos its arguments back.</p>

<h2 id="logging-into-a-remote-machine-using-ssh">Logging into a remote machine using <code class="highlighter-rouge">ssh</code></h2>

<p>The Department of Computer Science operates a set of Linux servers in the basement of Sudikoff, and you should plan to log in to one of those servers for doing the labs. (See the <a href="http://www.cs.dartmouth.edu/~wbc/suditour/011/index.html">list of recommended servers</a> - a web page accessible only on campus.)</p>

<p>I’ll login in from my Mac using the <strong>s</strong>ecure <strong>sh</strong>ell (<code class="highlighter-rouge">ssh</code>) Unix command. The <code class="highlighter-rouge">ssh</code> command establishes a secure channel and uses public-key cryptography to authenticate the remote computer and the user.</p>

<blockquote>
  <p>The <code class="highlighter-rouge">ssh</code> command replaces the archaic <code class="highlighter-rouge">telnet</code> (remote communications with another computer) and <code class="highlighter-rouge">rlogin</code> (remote login) because they lack security. The <code class="highlighter-rouge">ssh</code> command is exclusively used, these days, because your session is encrypted when it’s transmitted over the network, rather than being sent in clear text.</p>
</blockquote>

<p>Below, I remotely log in as user <code class="highlighter-rouge">cs50</code> to the server named <code class="highlighter-rouge">flume</code> by giving its full IP name - <code class="highlighter-rouge">flume.cs.dartmouth.edu</code>.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">xia@~&gt; </span>ssh -l cs50 flume.cs.dartmouth.edu
Last login: Tue Jun 21 15:03:52 2016 from 10.31.178.217
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>ls
Archive/  data/  dotfiles/  public_html/
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>ls dotfiles/
cs50-home/  fresh-accounts/  MacOS/
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">logout
</span>Connection to flume.cs.dartmouth.edu closed.
<span class="gp">xia@~&gt; </span>
</code></pre>
</div>

<blockquote>
  <p>It is also possible to connect to a remote Linux server using X-windows, an early form of graphical user interface that has the capability to run applications on a remote server but put the windows on your local computer. I won’t be using X in this course, but you may wish to explore the option.</p>
</blockquote>

<p>There are hundreds of Unix commands – but you probably only need a few dozen to get by. Each Unix command has a short abbreviated command name (e.g., LiSt directory (ls) or Secure SHell (ssh)) and its associated syntax that typically includes various arguments, and options; typically, these options (or switches as they are also known) are either a single letter preceded by a hyphen (e.g., <code class="highlighter-rouge">-l</code>) or one or more words preceded by two hyphens (e.g., <code class="highlighter-rouge">--verbose</code>). For example, the format of an <code class="highlighter-rouge">ssh</code> command line looks like this:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>	ssh <span class="o">[</span>options] <span class="o">[</span>user@] hostname <span class="o">[</span><span class="nb">command</span><span class="o">]</span>
</code></pre>
</div>

<p>In <code class="highlighter-rouge">ssh -l cs50 flume.cs.dartmouth.edu</code>, the switch <code class="highlighter-rouge">-l</code> informs the <code class="highlighter-rouge">ssh</code> command that the username of the user logging in is cs50. (Alternately, I could have used the form <code class="highlighter-rouge">ssh cs50@flume.cs.dartmouth.edu</code>).</p>

<p>This is a good time to look at the formatting of these command help texts. The <code class="highlighter-rouge">[ ]</code> are used to denote optional things, like</p>

<div class="highlighter-rouge"><pre class="highlight"><code>[command]
</code></pre>
</div>

<p>while the things outside of the <code class="highlighter-rouge">[ ]</code> , like <code class="highlighter-rouge">hostname</code>, must be specified.</p>

<h2 id="getting-information-using-the-online-manual-man">Getting Information using the online manual (man)</h2>

<p>If you want the detailed syntax of a Unix command you can use the manual command followed by the command, as in <code class="highlighter-rouge">man ssh</code> which produced the following:</p>

<pre><code class="language-man">    SSH(1)                    BSD General Commands Manual                   SSH(1)

    NAME
         ssh -- OpenSSH SSH client (remote login program)

    SYNOPSIS
         ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec] 
             [-D [bind_address:]port] [-e escape_char] [-F configfile] [-I pkcs11] 
             [-i identity_file] [-L [bind_address:]port:host:hostport] [-l login_name]
             [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] 
                [-R [bind_address:]port:host:hostport] [-S ctl_path]
             [-W host:port] [-w local_tun[:remote_tun]] [user@]hostname [command]

    DESCRIPTION
         ssh (SSH client) is a program for logging into a remote machine and for executing
         commands on a remote machine.  It is intended to replace rlogin and rsh, and
         provide secure encrypted communications between two untrusted hosts over an 
         insecure network.  X11 connections and arbitrary TCP ports can also be forwarded 
         over the secure channel.

         ssh connects and logs into the specified hostname (with optional user name).  The 
         user must prove his/her identity to the remote machine using one of several methods 
         depending on the protocol version used (see below).

         If command is specified, it is executed on the remote host instead of a login shell.

         The options are as follows:

         -1      Forces ssh to try protocol version 1 only.

         -2      Forces ssh to try protocol version 2 only.

         -4      Forces ssh to use IPv4 addresses only.

         -6      Forces ssh to use IPv6 addresses only.

         -A      Enables forwarding of the authentication agent connection.  This can also
                 be specified on a per-host

    ... and a whole lot more
</code></pre>

<p>This is just a snippet of the <code class="highlighter-rouge">man ssh</code> output (<code class="highlighter-rouge">man</code> is short for manual). The manual output includes all the nitty gritty details on options and about the command. For most commands you can use the common option <code class="highlighter-rouge">--help</code> (two hyphens) to get a brief breakdown of the command and its switches. This doesn’t work for all commands (including <code class="highlighter-rouge">ssh</code>, interestingly), but in that case the use of <code class="highlighter-rouge">-help</code> is interpreted as an invalid entry by ssh and it lists of the options anyway.</p>

<p>You can use</p>

<div class="highlighter-rouge"><pre class="highlight"><code>man -k keyword
</code></pre>
</div>

<p>to search through the manual pages for matches on a keyword. For example:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>man -k shell                                                           
bash <span class="o">(</span>1<span class="o">)</span>             - GNU Bourne-Again SHell
capsh <span class="o">(</span>1<span class="o">)</span>            - capability shell wrapper
chroot <span class="o">(</span>1<span class="o">)</span>           - run <span class="nb">command </span>or interactive shell with special root directory
chsh <span class="o">(</span>1<span class="o">)</span>             - change your login shell
CPAN::Admin <span class="o">(</span>3pm<span class="o">)</span>    - A CPAN Shell <span class="k">for </span>CPAN admins
CPAN::Plugin <span class="o">(</span>3pm<span class="o">)</span>   - Base class <span class="k">for </span>CPAN shell extensions
csh <span class="o">(</span>1<span class="o">)</span>              - C shell with file name completion and <span class="nb">command </span>line editing
... and much more
</code></pre>
</div>

<h2 id="your-home-directory-and-its-files">Your home directory and its files</h2>

<p>Each user has a ‘home directory’. After you have logged in using <code class="highlighter-rouge">ssh</code> you are in your home directory - that is, the shell’s notion of your ‘current working directory’ is your home directory.</p>

<p>We can look at our home directory ‘path’ using the <code class="highlighter-rouge">pwd</code> (print working directory) command. You can always use the <code class="highlighter-rouge">man</code> and  <code class="highlighter-rouge">info</code>  commands to get more information.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">pwd</span>
/net/class/cs50
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>
</code></pre>
</div>

<p>The tilde (~) above is shorthand for ‘home’. Let’s take a look at the contents of my home directory (using the -l switch which means long format):</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>ls 
Archive/  data/  dotfiles/  public_html/
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>ls -l
total 16
drwxr-x---  8 cs50 cs50 4096 Jun 21 14:58 Archive/
drwxr-xr-x  5 cs50 cs50 4096 Jun 11 06:29 data/
drwxr-xr-x  5 cs50 cs50 4096 Jun 11 06:29 dotfiles/
drwxr-xr-x 10 cs50 cs50 4096 Jun 19 15:15 public_html/
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">cd </span>cs50
-bash: <span class="nb">cd</span>: cs50: No such file or directory
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>cs cs50
-bash: cs: <span class="nb">command </span>not found
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">cd </span>dotfiles/
<span class="o">[</span>cs50@flume ~/dotfiles]<span class="nv">$ </span>ls -l
total 12
drwxr-xr-x 2 cs50 cs50 4096 Mar 29 22:16 cs50-home/
drwxr-xr-x 2 cs50 cs50 4096 Mar 29 11:15 fresh-accounts/
drwxr-xr-x 2 cs50 cs50 4096 Apr 13 14:08 MacOS/
<span class="o">[</span>cs50@flume ~/dotfiles]<span class="nv">$ </span>
</code></pre>
</div>

<p>Yes, I mistyped two commands in that example: <code class="highlighter-rouge">cd cs50</code> and <code class="highlighter-rouge">cs cs50</code>. I wanted you to see what the system says when you make a mistake … just in case you make one yourself sometime. ;-)</p>

<p>The <code class="highlighter-rouge">cd</code> command changes the current working directory; I finally typed it right and the shell reported that my working directory is <code class="highlighter-rouge">~/dotfiles</code>. The same command, <code class="highlighter-rouge">ls -l</code>, listed <em>that</em> directory the second time.</p>

<p>Files can be plain files, directories, or special files (more later). We can see that each file has file permissions and other data associated with it; for example, the directory <code class="highlighter-rouge">public_html</code>:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>drwxr-xr-x 10 cs50 cs50 4096 Jun 19 15:15 public_html/
</code></pre>
</div>

<p>You can traverse directory trees assuming you have the appropriate permission.</p>

<p>Unix supports a number of shells (command line interpreters). If we use the echo command we can look at the environment variable that tells us which shell is running. For this course we will use the bash (Born Again SHell) shell.</p>

<p>Again, the shell is the command processor for Unix systems. One way to find out what shell you’re running, try this:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$SHELL</span>
/bin/bash
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>
</code></pre>
</div>

<p>The first parameter to <code class="highlighter-rouge">echo</code> substitutes the value of the variable <code class="highlighter-rouge">SHELL</code>.
More on the bash shell later.</p>

<p>Another useful command for copying files between machines is the <code class="highlighter-rouge">scp</code> - secure copy (remote file copy program) command.  Below I find, then copy, of the schedule for CS50 from the course website.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="gp">xia@~&gt; </span>ssh cs50@flume.cs.dartmouth.edu
Last login: Tue Jun 21 15:11:57 2016 from 10.31.178.217
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span>ls
Archive/  data/  dotfiles/  public_html/
<span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">cd </span>public_html/
<span class="o">[</span>cs50@flume ~/public_html]<span class="nv">$ </span>ls
Comics/  data@      index.html  Lectures/   Reading/   Resources/
css/     examples/  Labs/   Logistics/  README.md  Schedule.pdf
<span class="o">[</span>cs50@flume ~/public_html]<span class="nv">$ </span><span class="nb">logout
</span>Connection to flume.cs.dartmouth.edu closed.
<span class="gp">xia@~&gt; </span>scp cs50@flume.cs.dartmouth.edu:~/public_html/Schedule.pdf .
Schedule.pdf                                                            100%   28KB  28.2KB/s   00:00    
<span class="gp">xia@~&gt; </span>open Schedule.pdf 
</code></pre>
</div>

<p>Recall that <code class="highlighter-rouge">~</code> indicates the home directory, so <code class="highlighter-rouge">~cs50</code> is the home directory for user <code class="highlighter-rouge">cs50</code>. I changed my directory there, then into its <code class="highlighter-rouge">public_html</code>, and listed the files there.  Now I know the ‘path name’ for the desired file - the directory name followed by slash followed by the filename. The <code class="highlighter-rouge">scp</code> command allows me to specify the host and pathname for the source and destination of the copy; here the destination is <code class="highlighter-rouge">.</code>, a shorthand for ‘current working directory. Finally, I used the MacOS command <code class="highlighter-rouge">open</code> to open the file, which launches <code class="highlighter-rouge">Preview</code> to show me the pdf.</p>

<h3 id="logging-out">Logging out</h3>

<p>OK, we are ready to logout from our session on flume.cs.dartmouth.edu.</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>cs50@flume ~]<span class="nv">$ </span><span class="nb">logout
</span>Connection to flume.cs.dartmouth.edu closed.
</code></pre>
</div>

<p>Okay, this has been a good start. We have covered a number of important issues that we will revisit in the course.</p>

<h2 id="housekeeping---things-you-need-to-do">Housekeeping - things you need to do:</h2>

<ol>
  <li>
    <p>If you haven’t already, do <a href="/~cs50/Labs/Lab0-Preliminaries.html">lab assignment 0</a> today!</p>
  </li>
  <li>
    <p>Visit <a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a> and connect to Piazza to make sure your accounts are set up and linked.</p>
  </li>
  <li>
    <p>Review all of the class materials on the website (Tentative Schedule, Lectures, Reading, Logistics, Reading, Resources), accessible via <a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a>. Pay special attention to the <a href="https://wiki.cs.dartmouth.edu/faq/doku.php/users_faq:first">CS Department User’s FAQ</a>.</p>
  </li>
  <li>
    <p>Before next class, use your CS unix account to go through the above examples: execute all the commands and get a ‘feel’ for the shell.</p>
  </li>
  <li>
    <p>Choose an editor and become very familiar with it. This is a very important step, as the reading assignment <em><a href="http://programmer.97things.oreilly.com/wiki/index.php/Learn_to_Use_a_Real_Editor">“Learn to use a real editor”</a></em> says. Your first homework assignment will be released at the next class period, so don’t delay!</p>
  </li>
</ol>

<h2 id="one-more-thing-remotely-accessing-cs-unix-machines">One more thing: Remotely accessing CS Unix machines</h2>

<p>Note the following, depending on your personal computer’s operating system.</p>

<p><strong>Linux</strong>: The systems in the CS department are running GNU/Linux. Your Linux will likely be sufficiently compatible that you won’t have any trouble developing on your machine and delivering your assignments on a CS machine. You may want to try the X-windows connection.</p>

<p><strong>Mac</strong>: Mac OSX Unix conforms to the POSIX standard for the C API, shell utilities, and threads and can compile and run your existing code. This is really exciting for Unix/Linux development. The GNU tools we will be using, such as <code class="highlighter-rouge">gcc</code>, <code class="highlighter-rouge">make</code>, etc., are either included or freely available. (You may need to install command-line tools via Xcode; if so, you will be prompted to do so when you first type <code class="highlighter-rouge">gcc</code> or <code class="highlighter-rouge">make</code> or related commands.) You can use the <code class="highlighter-rouge">Terminal</code> application. You can also use the <code class="highlighter-rouge">ssh</code> command to remotely log on to computers, as discussed above.</p>

<p><strong>Windows</strong>: There are Unix-command shells for Windows and even an X-Window system for Windows systems. However, given this is a Unix course you would be far better off doing your assignments on the departmental server. The most successful approaches have been to do your editing and documentation on the Windows system and to upload (using sftp, filezilla, etc.) and build/debug on the lab systems via ssh.  Many students have adopted the Sublime Text editor and used its handy sftp integration. As an alternative, visit Sudikoff 003/005 and use the MacOS computers there. As another alternative, consider installing Linux on your laptop - either to dual-boot (so you can choose Linux or Windows at boot time) or using Virtual Machine software to run one OS on top of the other.</p>

<h2 id="historical-note">Historical note</h2>
<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Unix">Unix</a> was developed at Bell Labs in the 1970s by a group led by <a href="https://en.wikipedia.org/wiki/Douglas_McIlroy">Doug McIlroy</a>, now an Adjunct Professor at Dartmouth (visit him in Sudikoff!). A few years later, as a high school student in 1981, I started using Unix and programming in C. Gosh, the 35 years since then represent <em>half the time since the dawn of programmable computers in 1946</em>, because 2016 is the 70th anniversary of the announcement of <a href="https://en.m.wikipedia.org/wiki/ENIAC">ENIAC</a>,  the world’s first programmable computer. Yikes!</p>
</blockquote>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">CS50 Summer 2016 -- Dartmouth College</h2>

    <p> <font size=-1> 
    	This version of the course is based upon those designed by 
    	Professors Kotz, Palmer, Campbell, and Balkcom. 
	I am deeply indebted to these outstanding educators.
    -- <a href="/~xia/">Xia Zhou</a>
       </font> 
    </p>

  </div>

</footer>


  </body>

</html>
