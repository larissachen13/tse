http://old-www.cs.dartmouth.edu/~cs50/Lectures/13-git/tags.html
3
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Extra - Using Git Tags</title>
  <meta name="description" content="In Computer Science 50 you will learn how to design & build large,  reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="stylesheet" href="/~cs50/css/main.css">
  <link rel="canonical" href="http://www.cs.dartmouth.edu/~cs50/Lectures/13-git/tags.html">
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/~cs50/">CS50 Summer 2016</a>

    <nav class="site-nav">

      [<a href="https://canvas.dartmouth.edu/courses/15260">Canvas</a>]
      [<a href="https://piazza.com/dartmouth/summer2016/cs50/home">Piazza</a>]
      [<a href="https://gitlab.cs.dartmouth.edu">Gitlab</a>]
      [<a href="/~cs50/Schedule.pdf">Schedule</a>]
      [<a href="/~cs50/Lectures/">Lectures</a>]
      [<a href="/~cs50/Reading/">Reading</a>]
<!--      [<a href="/~cs50/examples/">Examples</a>]  -->
      [<a href="/~cs50/Logistics/">Logistics</a>]
      [<a href="/~cs50/Resources/">Resources</a>]
      [<a href="/~cs50/Labs/">Labs</a>]
      [<a href="/~cs50/Project/">Project</a>]

   </nav>
</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
    <h1 class="post-title">Extra - Using Git Tags</h1>
  </header>

  <div class="post-content">
    <h3 id="students">Students:</h3>

<p>As a member of some project, you can add tags to your repository. Tags are nice for adding annotations to your history. Tags don’t change your commit history but they can be used as a sort of bookmark. I often use tags for highlighting new versions or milestones in my projects. When you submit <code class="highlighter-rouge">lab3</code>, that is a sort of milestone that says “OK, I’ve finished the data structures. I’m ready to move on to the crawler! (<code class="highlighter-rouge">lab4</code>).” A couple of weeks (or months or years) from now you might be interested in revisiting the state of your code when you had finished the hashtable, for example. Rather than trying to remember some long git hash for your last commit of <code class="highlighter-rouge">lab3</code>, and to help us (and your future selves), we want you to add a <code class="highlighter-rouge">tag</code> to the project to indicate when the work is complete for <code class="highlighter-rouge">lab3</code>. By default <code class="highlighter-rouge">git tag TAGNAME</code> will add a tag to the current <code class="highlighter-rouge">HEAD</code> of your working tree.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git tag lab3submit
</code></pre>
</div>

<p>You can also add a <code class="highlighter-rouge">tag</code> to a previous commit—–this might be useful if you charged ahead and made a few commits but want to go back and mark some commit in the past with a <code class="highlighter-rouge">tag</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git tag oops d4fd63a
</code></pre>
</div>

<p>If you accidentally add a <code class="highlighter-rouge">tag</code> or add a <code class="highlighter-rouge">tag</code> to the wrong commit, you can always delete a <code class="highlighter-rouge">tag</code> by using the -d flag and identifying the <code class="highlighter-rouge">tag</code> by the name you gave it.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git tag -d oops
</code></pre>
</div>

<p>Adding tags, currently, has only annotated our commit history locally. Don’t forget to push your tags (you must do so explicitly as follows) to the remote so that your locally created tags are visible to other people that have access to your repository that lives on GitLab.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git push --tags
</code></pre>
</div>

<p>Once you’ve pushed your tags to the remote, you should go to GitLab and verify that you can see any tags that you’ve created and pushed. On the main page of your project (in GitLab) you should see buttons for <code class="highlighter-rouge">commit(s)</code>, <code class="highlighter-rouge">branch(s)</code>, and <code class="highlighter-rouge">tag(s)</code> (<strong>NOTE:</strong> The GitLab web interface is smart and will update the text of these buttons in accordance with the number of “things”. For example, if you have 1 commit it will say <code class="highlighter-rouge">1 commit</code>, not <code class="highlighter-rouge">1 commits</code>. This is why I included the parentheticals for the commit/branch/tag button text. A small but nice feature :). Click on <code class="highlighter-rouge">tag(s)</code>. Alternatively, you can click on the “commits” icon in the left navbar and it will take you to a screen where you can browse things like commits, branches, and tags.</p>

<p>To learn more about <code class="highlighter-rouge">git tag</code>, run <code class="highlighter-rouge">git help tag</code>.</p>

<h3 id="graders">Graders:</h3>

<p>For the sake of transparancy, let’s take a quick look at how we, as graders, will use the tags you create to checkout appropriate versions of your code. For example, we will do something akin to the following when we go to grade your lab3 submission:</p>

<p>Clone the student repo.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git clone URL
</code></pre>
</div>

<p>List any/all existing tags—we should hopefully see the appropriate submission tag (e.g., lab3)</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git tag -l
</code></pre>
</div>

<p>Now we can checkout the code that was in the repo at the time of that tag (i.e., the state of the code at the time of submitting lab3).</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git checkout tags/lab3submit
</code></pre>
</div>

<p>If you prefer, you can create a new branch from the code base at the point of the specified tag; you can now freely edit the code and there are no concerns about messing up anything on the master branch.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ git checkout tags/lab3submit -b lab3testing
</code></pre>
</div>

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">CS50 Summer 2016 -- Dartmouth College</h2>

    <p> <font size=-1> 
    	This version of the course is based upon those designed by 
    	Professors Kotz, Palmer, Campbell, and Balkcom. 
	I am deeply indebted to these outstanding educators.
    -- <a href="/~xia/">Xia Zhou</a>
       </font> 
    </p>

  </div>

</footer>


  </body>

</html>
